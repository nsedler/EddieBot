{
	// Place your eddie_bot workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Discord Bot Command": {
		"scope": "rust",
		"prefix": "cmd",
		"body": [
			"use crate::commands::command::Command;",
			"use serenity::{model::channel::Message, prelude::*};",
			"use std::io;",
			"",
			"pub struct cmd {}",
			"",
			"impl Command for cmd {",
				"\tfn cmd(&self) -> &str { \"cmd\" }",
				"\tfn aliases(&self) -> Vec<&str> { Vec::new() }",
				"\tfn help(&self) -> &str { \"Placeholder\" }",
				"\tfn execute(&self, ctx: &Context, msg: &Message) -> io::Result<()> {",
					"\t\tmsg.channel_id.say(&ctx.http, \"Placeholder\".to_string()).expect(\"Error executing command\");",
					"\t\tOk(())",
				"\t}",
			"}"
		]
	},

	"Cmds": {
		"prefix": "cmd",
		"body": [
		  "use crate::commands::command::Command;",
		  "use serenity::{model::channel::Message, prelude::*};",
		  "use std::io;",
		  "",
		  "pub struct ${1:CmdName} {}",
		  "",
		  "impl Command for ${1:CmdName} {",
		  "    fn cmd(&self) -> &str {",
		  "        \"${2:cmd}\"",
		  "    }",
		  "    fn aliases(&self) -> Vec<&str> {",
		  "        Vec::new()",
		  "    }",
		  "    fn help(&self) -> &str {",
		  "        \"${3:description}\"",
		  "    }",
		  "    fn owner_cmd(&self) -> bool {",
		  "        ${4:owner_cmd}",
		  "    }",
		  "    fn execute(&self, ctx: &Context, msg: &Message) -> io::Result<()> {",
		  "        Ok(())",
		  "    }",
		  "}",
		  ""
		],
		"description": "Cmds"
	  }
}